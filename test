package matrixmultiplication;
import java.util.Random;

public class test {
	
	public static void main(String[] args) {
		test test = new test();
		int [][] array;
		int [][] array2;
		int count = 100;
		int size = 0;
		long start, end;
		long classicTime = 0;
		long divideAndConquerTime = 0;
		long strassenTime = 0;
		
		for(int i = 1; i > 0; i++) {
			size = (int) Math.pow(2, i);
			int [][] result = new int [size][size];
			array = test.makeMatrix(size);
			array2 = test.makeMatrix(size);
			for( int j = 0; j < count; j++) {
				start = System.nanoTime();
				test.classic(array, array2);
				end = System.nanoTime();
				classicTime += end - start;
				
				start = System.nanoTime();
				test.divideAndConquer(array, array2, size);
				end = System.nanoTime();
				divideAndConquerTime += end -start;
				
				start = System.nanoTime();
				test.Strassen(array, array2, result, size);
				end = System.nanoTime();
				strassenTime += end - start;
				
			}
			classicTime = classicTime / count;
			divideAndConquerTime = divideAndConquerTime / count;
			strassenTime = strassenTime / count;
			
			System.out.println(size);
			System.out.println("classic time: " + classicTime);
			System.out.println("divide and conquer time: " + divideAndConquerTime);
			System.out.println("strassen: " + strassenTime);
		}
	

		
	}
	public int[][] classic(int [][] arr, int [][] arr2) {
		
		int [][] result = new int[arr.length][arr.length];
		for(int i = 0; i < arr.length; i++) {
			for(int j = 0; j < arr.length; j++){
				for(int k = 0; k < arr.length; k++) {
					result[i][j]  +=  arr[i][k] * arr2[k][j];
				}
			}
		}
		return result;
	}
	public int[][] divideAndConquer(int [][] arr, int [][] arr2, int size){
		test test = new test();
		
		int [][] result = new int[arr.length][arr.length];
		if (arr.length == 1) {
			result[0][0] = arr[0][0] * arr2[0][0];
		}else {
			int[][] A11 = new int[size / 2][size / 2];
			int[][] A12 = new int[size / 2][size / 2];
			int[][] A21 = new int[size / 2][size / 2];
			int[][] A22 = new int[size / 2][size / 2];
			int[][] B11 = new int[size / 2][size / 2];
			int[][] B12 = new int[size / 2][size / 2];
			int[][] B21 = new int[size / 2][size / 2];
			int[][] B22 = new int[size / 2][size / 2];
			
			test.partitionMatrix(arr, A11, 0, 0);
			test.partitionMatrix(arr, A12, 0, size/2);
			test.partitionMatrix(arr, A21, size/2, 0);
			test.partitionMatrix(arr, A22, size/2, size/2);
			test.partitionMatrix(arr2, B11, 0, 0);
			test.partitionMatrix(arr2, B12, 0, size/2);
			test.partitionMatrix(arr2, B21, size/2, 0);
			test.partitionMatrix(arr2, B22, size/2, size/2);
			
			int [][] C11 = test.addMatrix(test.divideAndConquer(A11, B11, A11.length), test.divideAndConquer(A12, B21, A12.length));
			int [][] C12 = test.addMatrix(test.divideAndConquer(A11, B12, A11.length), test.divideAndConquer(A12, B22, A12.length));
			int [][] C21 = test.addMatrix(test.divideAndConquer(A21, B11, A21.length), test.divideAndConquer(A22, B21, A22.length));
			int [][] C22 = test.addMatrix(test.divideAndConquer(A21, B12, A21.length), test.divideAndConquer(A22, B22, A22.length));
			
			test.combine(result, C11, 0, 0);
			test.combine(result, C12, 0, size/2);
			test.combine(result, C21, size/2, 0);
			test.combine(result, C22, size/2, size/2);
			
		
		}
		return result;
	}
	public void partitionMatrix(int [][] arr,int [][] newArray, int row, int col) {
		
		/*for(int i =0; i < newArray.length; i++) {
			for(int j = 0; j < newArray.length; j++) {
				newArray[i+row][j+col] = arr[i+row][j+col];
			}
		}*/
		
		for (int i = 0; i < newArray.length; i++) {
			for (int j = 0; j < newArray.length; j++) {
				newArray[i][j] = arr[i+row][j+col];
			}
			
			
		}
	}
	public void combine(int [][] result, int [][] partMatrix, int row, int col){
		for(int i = 0; i < partMatrix.length; i++) {
			for(int j = 0; j < partMatrix.length; j++) {
				result[i+row][j+col] = partMatrix[i][j];
			}
		}
	}
	public int [][] addMatrix(int [][] matrix1, int [][]matrix2){
		int[][] result = new int [matrix1.length][matrix1.length];
		for (int i = 0; i < matrix1.length; i++) {
			for(int j = 0; j < matrix1.length; j++) {
				result[i][j] = matrix1[i][j] + matrix2[i][j];
			}
		}
		return result;
	}
	public int [][] subMatrix(int [][] matrix1, int [][] matrix2){
		int [][] result = new int [matrix1.length][matrix1.length];
		for(int i = 0; i < matrix1.length; i++) {
			for (int j = 0; j < matrix1.length; j++) {
				result[i][j] = matrix1[i][j] - matrix2[i][j];
			}
		}
		return result;
	}
	public int [][] makeMatrix(int size){
		Random rand = new Random();
		int [][] matrix = new int [size][size];
		for(int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				matrix[i][j] = rand.nextInt(100);
			}
		}
		return matrix;
	}
	public void Strassen(int [][] matrix1, int [][] matrix2, int [][] output, int size){
		
		test test = new test();
		if(size == 2) {
			output[0][0] = matrix1[0][0] * matrix2[0][0] + matrix1[0][1] * matrix2[1][0];
			output[0][1] = matrix1[0][0] * matrix2[0][1] + matrix1[0][1] * matrix2[1][1];
			output[1][0] = matrix1[1][0] * matrix2[0][0] + matrix1[1][1] * matrix2[1][0];
			output[1][1] = matrix1[1][0] * matrix2[0][1] + matrix1[1][1] * matrix2[1][1];
		}else {
			int[][] A11 = new int[size / 2][size / 2];
			int[][] A12 = new int[size / 2][size / 2];
			int[][] A21 = new int[size / 2][size / 2];
			int[][] A22 = new int[size / 2][size / 2];
			int[][] B11 = new int[size / 2][size / 2];
			int[][] B12 = new int[size / 2][size / 2];
			int[][] B21 = new int[size / 2][size / 2];
			int[][] B22 = new int[size / 2][size / 2];
			
			int[][] P = new int[size / 2][size / 2];
			int[][] Q = new int[size / 2][size / 2];
			int[][] R = new int[size / 2][size / 2];
			int[][] S = new int[size / 2][size / 2];
			int[][] T = new int[size / 2][size / 2];
			int[][] U = new int[size / 2][size / 2];
			int[][] V = new int[size / 2][size / 2];
			
			test.partitionMatrix(matrix1, A11, 0, 0);
			test.partitionMatrix(matrix1, A12, 0, size/2);
			test.partitionMatrix(matrix1, A21, size/2, 0);
			test.partitionMatrix(matrix1, A22, size/2, size/2);
			test.partitionMatrix(matrix2, B11, 0, 0);
			test.partitionMatrix(matrix2, B12, 0, size/2);
			test.partitionMatrix(matrix2, B21, size/2, 0);
			test.partitionMatrix(matrix2, B22, size/2, size/2);
			
			test.Strassen(test.addMatrix(A11, A22), test.addMatrix(B11, B22), P, size/2);
			test.Strassen(test.addMatrix(A21, A22), B11, Q, size/2);
			test.Strassen(A11, test.subMatrix(B12, B22), R, size/2);
			test.Strassen(A22, test.subMatrix(B21, B11), S, size/2);
			test.Strassen(test.addMatrix(A11,A12), B22, T, size/2);
			test.Strassen(test.subMatrix(A21, A11), test.addMatrix(B11,B12), U, size/2);
			test.Strassen(test.subMatrix(A12, A22), test.addMatrix(B21, B22), V, size/2);
			
			int [][] C11 = test.subMatrix(test.addMatrix(P, S), test.addMatrix(T, V));
			int [][] C12 = test.addMatrix(R, T);
			int [][] C21 = test.addMatrix(Q, S);
			int [][] C22 = test.subMatrix(test.addMatrix(P, R), test.addMatrix(Q,U));
			
			test.combine(output, C11, 0, 0);
			test.combine(output, C12, 0, size/2);
			test.combine(output, C21, size/2, 0);
			test.combine(output, C22, size/2, size/2);
			
			
		}
		
	}

}
